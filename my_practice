import tushare as ts
import pandas as pd
from sqlalchemy import create_engine
import pymysql

ts.set_token('d43442cf91b3bbfb29c774df98eeeb0937f68e10dde9866c6b355132')
pro=ts.pro_api('d43442cf91b3bbfb29c774df98eeeb0937f68e10dde9866c6b355132')

conn =pymysql.connect(host='94.191.35.26',user='root',password='my*huawei0001',database='certificate',charset='utf8')
sql='select * from idcard_info'
d = pd.read_sql(sql, con=conn) # 读取数据read_sql，格式为pandas的DataFrame

df2=ts.get_k_data('603967')
#print(d)
df = ts.get_hist_data('603967')  # 读取数据，格式为DataFrame
#df2=pd.read_sql(sql, con=a)
#df = pd.read_excel('a.xls') #从EXCEL读取数据
#df.to_sql(name = 'table_name',con = engine,if_exists = 'append',index = False,index_label = False)
engine = create_engine("mysql+pymysql://root:my*huawei0001@94.191.35.26:3306/certificate?charset=utf8")
#创建一次引擎，对多个数据DF进入存储
df.to_sql('tick_data', engine,if_exists='replace',index = False)
df2.to_sql('603967',engine,if_exists='replace',index=False)
# 存入数据库，这句有时候运行一次报错，运行第二次就不报错了，不知道为什么
#加了index = False之后没有报错了。
#解决办法：删除索引，和字段最大长度超过256，CREATE INDEX ix_tick_data_date ON tick_data (date)。

d.to_sql('idcard_info_pandas',engine,if_exists='replace',index = False) # 存入数据库
#if_exists：三种模式{“fail”,“replace”,"append"}，默认是"fail"。fail：若表存在，
#引发一个ValueError；replace：若表存在，
#覆盖原来表内数据；append：若表存在，将数据写到原表数据的后面。
#1170 - BLOB/TEXT column 'CustomerName' used in key specification without a key length
df1 = pd.read_sql('tick_data', engine)  # 从数据库中读取表存为DataFrame
conn.close()



#定义一个函数get_a_share
def get_a_share(code):
    #使用tushare的get_k_data调用A股股票数据
    data = ts.get_k_data(code)
    #删除列code
    #data = data.drop('code',axis = 1)
    #返回修改后的股票数据
    return data

    #定义函数，获取macd,导入数据，初始化三个参数
def get_macd_data(data,short=0,long=0,mid=0):
    if short==0:
        short=12
    if long==0:
        long=26
    if mid==0:
        mid=9
    #计算短期的ema，使用pandas的ewm得到指数加权的方法，mean方法指定数据用于平均
    data['sema']=pd.Series(data['close']).ewm(span=short).mean()
    #计算长期的ema，方式同上
    data['lema']=pd.Series(data['close']).ewm(span=long).mean()
    #填充为na的数据
    data.fillna(0,inplace=True)
    #计算dif，加入新列data_dif
    data['data_dif']=data['sema']-data['lema']
    #计算dea
    data['data_dea']=pd.Series(data['data_dif']).ewm(span=mid).mean()
    #计算macd
    data['data_macd']=2*(data['data_dif']-data['data_dea'])
    #填充为na的数据
    data.fillna(0,inplace=True)
    #返回data的三个新列
    return data[['code','date','open','high','low','close','data_dif','data_dea','data_macd']]
#请输入代码
code = str(input('请输入代码：')) #设置为变量
data = get_a_share(code)
macd = get_macd_data(data)
df_macd=macd

#df_macd.to_sql(code,engine,if_exists='replace',index=False)  #用变量进行数据表命名
#另一种写法
pd.io.sql.to_sql(df_macd,'mydata',engine,if_exists='append',index=False)  #用变量进行数据表命名code
#以下为上述参数格式
#pd.io.sql.to_sql(df1,tablename,con=conn,if_exists='repalce')
